namespace ca.mcgill.ecse223.tileo.controller;

class TileOController {
	depend ca.mcgill.ecse223.tileo.application.TileOApplication;
	depend ca.mcgill.ecse223.tileo.exception.InvalidInputException; 
	depend ca.mcgill.ecse223.tileo.model.TileO;
	depend ca.mcgill.ecse223.tileo.model.Game;
	depend ca.mcgill.ecse223.tileo.model.Deck;
	depend ca.mcgill.ecse223.tileo.model.Tile;
	depend ca.mcgill.ecse223.tileo.model.WinTile;
	depend ca.mcgill.ecse223.tileo.model.ActionTile;
	depend ca.mcgill.ecse223.tileo.model.NormalTile;
	depend ca.mcgill.ecse223.tileo.model.Player;
	depend ca.mcgill.ecse223.tileo.model.Connection;
	depend ca.mcgill.ecse223.tileo.model.ActionCard;
	depend ca.mcgill.ecse223.tileo.model.ConnectTilesActionCard;
	depend ca.mcgill.ecse223.tileo.model.LoseTurnActionCard;
	depend ca.mcgill.ecse223.tileo.model.RemoveConnectionActionCard;
	depend ca.mcgill.ecse223.tileo.model.RollDieActionCard;
	depend ca.mcgill.ecse223.tileo.model.TeleportActionCard;
	depend ca.mcgill.ecse223.tileo.model.RemoveRandomTileActionCard;
	depend ca.mcgill.ecse223.tileo.model.RevealTileActionCard;
	depend ca.mcgill.ecse223.tileo.model.SendBackToStartActionCard;
	depend ca.mcgill.ecse223.tileo.model.SwapPositionActionCard;
	depend ca.mcgill.ecse223.tileo.model.WinTileHintActionCard;

	depend java.util.ArrayList;
	depend java.util.List;
	
	lazy Tile currentTile;
	lazy ArrayList<Tile> possibleTiles;
	
	
	
	controllerState {
		Design {
			startGame(Game game) / {
				doStartGame(game);
			} -> Game;
		}
		
		Game {
			StartOfTurn {
				rollDie / {
					doRollDie();
				} -> WaitForTile;
			}
		
			WaitForTile {
				selectNewTile(Tile aTile) -> / {
	                doSelectNewTile(aTile);
	            } WaitForLanding;
	            playChooseAdditionalMoveActionCard(int n) [verifyGameMode(Game.Mode.GAME_CHOOSEADDITIONALMOVEACTIONCARD)] / {
      				doPlayChooseAdditionalMoveActionCard(n);
      			} -> WaitForTile;
			}
			
			WaitForLanding {
				land [tileIsNormal()] / {doLand(currentTile);} ->  StartOfTurn;
				land [tileIsWin()] / {doLand(currentTile);} -> GameWon;
				land [tileIsAction()] / {doLand(currentTile);} -> LandedAction;	
			}
			
			GameWon {
	        }
	
	        LandedAction {
	            playRollDieActionCard [verifyGameMode(Game.Mode.GAME_ROLLDIEACTIONCARD)] / {
	                doPlayRollDieActionCard();
	            } -> WaitForTile; 
	            playConnectTilesActionCard(Tile t1, Tile t2) [verifyGameMode(Game.Mode.GAME_CONNECTTILESACTIONCARD)] / {
	                doPlayConnectTilesActionCard(t1, t2);
	            } -> StartOfTurn;
	            playRemoveConnectionActionCard(Tile t1, Tile t2) [verifyGameMode(Game.Mode.GAME_REMOVECONNECTIONACTIONCARD)] / {
	                doPlayRemoveConnectionActionCard(t1, t2);
	            } -> StartOfTurn;
	            playTeleportActionCard(Tile t) [verifyGameMode(Game.Mode.GAME_TELEPORTACTIONCARD)] / {
	                doPlayTeleportActionCard(t);
	            } -> WaitForLanding;
	            playLoseTurnActionCard() [verifyGameMode(Game.Mode.GAME_LOSETURNACTIONCARD)] / {
	            	doPlayLoseTurnActionCard();
	            } -> StartOfTurn;
	            playRemoveRandomTileActionCard(Game game)[verifyGameMode(Game.Mode.GAME_REMOVERANDOMTILEACTIONCARD)] / {
                    doPlayRemoveRandomTileActionCard(game);
      			} -> StartOfTurn;
      			playTurnInactiveActionCard(Game currentGame) [verifyGameMode(Game.Mode.GAME_TURNINACTIVEACTIONCARD)] / {
        			doPlayTurnInactiveActionCard(currentGame);
      			} -> StartOfTurn;
      			playChooseAdditionalMoveActionCard(int n) [verifyGameMode(Game.Mode.GAME_CHOOSEADDITIONALMOVEACTIONCARD)] / {
      				doPlayChooseAdditionalMoveActionCard(n);
      				TileOApplication.getTileO().getCurrentGame().setNextCard();
      			} -> WaitForTile;
      			playRevealTileActionCard() [verifyGameMode(Game.Mode.GAME_REVEALTILEACTIONCARD)] / {
      				doPlayRevealTileActionCard();
      			} -> StartOfTurn;
      			playSendBackToStartActionCard(Tile t)
      			[verifyGameMode(Game.Mode.GAME_SENDBACKTOSTARTACTIONCARD)] / {
                    doPlaySendBackToStartActionCard(t);
      			} -> StartOfTurn;
      			playSwapPositionActionCard(Tile t) 
      			[verifyGameMode(Game.Mode.GAME_SWAPPOSITIONACTIONCARD)] / {
      				doPlaySwapPositionActionCard(t);
      			} -> StartOfTurn;
      			playWinTileHintActionCard()
      			[verifyGameMode(Game.Mode.GAME_WINTILEHINTACTIONCARD)] / {
      				doPlayWinTileHintActionCard();
      			} -> StartOfTurn;
	        }
	    }
	}
	

	// guard
    private boolean verifyGameMode(Game.Mode aMode) {
        return TileOApplication.getTileO().getCurrentGame().getMode()==aMode;
    }
    private boolean tileIsNormal() {
    	return currentTile instanceof NormalTile || (currentTile instanceof ActionTile && ((ActionTile)currentTile).getInactivityStatus()==ActionTile.InactivityStatus.Inactive);
    }
    private boolean tileIsWin() {
    	return currentTile instanceof WinTile;
    }
    private boolean tileIsAction() {
    	return currentTile instanceof ActionTile && ((ActionTile)currentTile).getInactivityStatus() == ActionTile.InactivityStatus.Active;
    }


	// Design
    public Game newGame(int nPlayer) throws InvalidInputException{
    	if (nPlayer < Game.minimumNumberOfPlayers())
    		throw new InvalidInputException("Not enough players");
    	if (nPlayer > Game.maximumNumberOfPlayers())
    		throw new InvalidInputException("Too many players");
    	
    	TileO tileo = TileOApplication.getTileO();    	
    	Game game = new Game(0);
    	tileo.addGame(game);
    	
    	int n = 0;
    	while (n < nPlayer){
    		Player p = new Player(n, game);
    		p.setColorByNumber();
    		n++;
    	}
    	game.setMode(Game.Mode.DESIGN);
    	setControllerState(ControllerState.Design);
    	setControllerStateGame(ControllerStateGame.Null);
    	tileo.setCurrentGame(game);
    	return game;
    }
    
    public void addRegularTile(int x, int y, Game game){

        TileO tileO = TileOApplication.getTileO();

        try{
            tileO.addNormalTile(x, y, game);
        }catch (RuntimeException e){

            System.out.print("Error");
        }
    }

    public void addActionTile(int x, int y, Game game, int inactivityPeriod){

        TileO tileO = TileOApplication.getTileO();

        try{
            tileO.addActionTile(x, y, game, inactivityPeriod);
        }catch (RuntimeException e){

            System.out.print("Error");
        }
    }

    public void addHiddenTile(int x, int y, Game game){

        try{
            WinTile wt = new WinTile(x, y, game);
            game.setWinTile(wt);
            
        }catch (RuntimeException e){

            System.out.print("Error");
        }
    }
    
    public void removeTile(Tile tile, Game game){

        TileO tileO = TileOApplication.getTileO();
        if (tile instanceof WinTile)
        	tileO.getCurrentGame().setWinTile(null);
        tileO.removeTile(tile);
    }
    
    public void addConnection(Tile t1, Tile t2, Game game) throws InvalidInputException {
    	if (t1.isConnectedWith(t2))
    		throw new InvalidInputException("Tiles are already connected");
    	if (!game.connectTiles(t1, t2))
    		throw new InvalidInputException("Selected tiles are not adjacent");
    }
    
    public void removeConnection(Tile t1, Tile t2, Game game) throws InvalidInputException {
    	if (!game.disconnectTiles(t1, t2))
    		throw new InvalidInputException("These tiles are not connected");
    }
    
    public void setStartingTile(int nPlayer, Tile t, Game game) throws InvalidInputException {
    	if (t!=null && t!=game.getWinTile()) {
    		Player p = game.getPlayer(nPlayer);
        	p.setStartingTile(t);
    	}
    	else
    		throw new InvalidInputException("Invalid tile");
    }
    
    public void updateCards(int numberOfCards, int cardType) throws InvalidInputException {
    	Game game = TileOApplication.getTileO().getCurrentGame();
    	Deck deck = game.getDeck();
    	int toAdd = numberOfCards - deck.numberOfCardsForType(cardType);
    
    	if (toAdd>0) deck.addCards (toAdd, cardType);
    	else if (toAdd<0) deck.rmCards(toAdd*-1, cardType); 
        
  	}
    
    
    // Game
    private void cloneGame(Game game) {
    	TileO tileo = TileOApplication.getTileO();
    	if (game.getMode() == Game.Mode.DESIGN) { // when you start a game
	    	if (game.getFilename() == null || game.getFilename() == "") return; // if you never saved this design dont clone it
	    	Game cloned = game.clone();
	    	tileo.addGame(cloned);
	    	tileo.setCurrentGame(cloned);
	    	saveGame(""); // will use the current name for the design
	    	game.setFilename(null); // make sure it's saved under a new name
	    	tileo.setCurrentGame(game);
    	}
    }
    
    private void doStartGame(Game selectedGame) throws InvalidInputException{
    /* Starts the selected game if it respects the rules */   
        
        String error = "";
        Deck deck = selectedGame.getDeck();
        if (deck.numberOfCards() != Game.NumberOfActionCards)
            error+= "The deck needs to have "+Game.NumberOfActionCards+" cards ";
        if (selectedGame.getWinTile() == null)
            error+="There is no WinTile selected ";
        if (selectedGame.numberOfPlayers() < selectedGame.minimumNumberOfPlayers())
            error+="Needs minimum two players ";
        if (selectedGame.numberOfPlayers() > selectedGame.maximumNumberOfPlayers())
            error+="Too many players ";
        for (Player aPlayer : selectedGame.getPlayers())
            if (aPlayer.getStartingTile()==null)
                error+="Missing starting tile for player "+aPlayer.getNumber()+" ";
        
        if (!error.equals(""))
            throw new InvalidInputException(error.trim());
            
        cloneGame(selectedGame); 

        deck.shuffle();
        deck.setCurrentCard(deck.getCard(0));
        for (Tile aTile : selectedGame.getTiles()) aTile.setHasBeenVisited(false);
        for (Player aPlayer : selectedGame.getPlayers()) {
            aPlayer.setCurrentTile(aPlayer.getStartingTile());
            aPlayer.getCurrentTile().setHasBeenVisited(true);
        }
        selectedGame.setCurrentPlayer(selectedGame.getPlayers().get(0));
        selectedGame.setCurrentConnectionPieces(Game.SpareConnectionPieces);
        selectedGame.setMode(Game.Mode.GAME);
  }
    
    private void doRollDie() {
    	Game game = TileOApplication.getTileO().getCurrentGame();
    	setPossibleTiles(game.rollDie());
    }
    
    private void doSelectNewTile(Tile aTile) throws InvalidInputException {
    	if (getPossibleTiles().contains(aTile) || getPossibleTiles().size()==0)
    		setCurrentTile(aTile);
    	else 
    		throw new InvalidInputException("Invalid tile");
    }

    private void doLand(Tile tile) throws InvalidInputException{
        /* Initiates when a player lands on a tile */
        tile.land();
        setPossibleTiles(null);
        setCurrentTile(null);
    }
    
    private void doPlayRollDieActionCard() throws InvalidInputException {

        Game currentGame= TileOApplication.getTileO().getCurrentGame();
        ArrayList<Tile> availableTiles=null;
        currentGame.setMode(Game.Mode.GAME_ROLLDIEACTIONCARD);
        Deck currentDeck= currentGame.getDeck();
        Player currentPlayer= currentGame.getCurrentPlayer();
        ActionCard currentCard = currentDeck.getCurrentCard();
        if(currentCard instanceof RollDieActionCard){
        	RollDieActionCard playCard = (RollDieActionCard) currentCard;
        	availableTiles= playCard.play();
        }
        currentGame.setNextCard();
        currentGame.setMode(Game.Mode.GAME);
        setPossibleTiles(availableTiles);
        
    }
    
    private void doPlayConnectTilesActionCard(Tile t1, Tile t2) throws InvalidInputException {

        Game currentGame = TileOApplication.getTileO().getCurrentGame();
        currentGame.setMode(Game.Mode.GAME_CONNECTTILESACTIONCARD);
        Player currentPlayer= currentGame.getCurrentPlayer();
        Deck currentDeck = currentGame.getDeck();
        ActionCard currentCard= currentDeck.getCurrentCard();
        if (t1.isConnectedWith(t2))
    		throw new InvalidInputException("Tiles are already connected");
        boolean wasConnected = false;
        if(currentGame.getCurrentConnectionPieces() <= 0)
        	wasConnected = true;
        else if(currentCard instanceof ConnectTilesActionCard){
            ConnectTilesActionCard playCard = (ConnectTilesActionCard) currentCard;
            wasConnected =playCard.play(t1, t2);            
        }
        if(wasConnected){
            currentGame.setNextPlayer();
            currentGame.setNextCard();
            currentGame.setMode(Game.Mode.GAME);
			if(!(currentGame.getCurrentConnectionPieces() == 0))
            	currentGame.setCurrentConnectionPieces(currentGame.getCurrentConnectionPieces() - 1);
            else
            	currentGame.setCurrentConnectionPieces(0);
            
        }
        else{
            throw new InvalidInputException("Tiles not adjacent, choose another tile");
        }
    }
    
    private void doPlayRemoveConnectionActionCard(Tile t1, Tile t2) throws InvalidInputException {
    	
        Game currentGame = TileOApplication.getTileO().getCurrentGame();
        currentGame.setMode(Game.Mode.GAME_REMOVECONNECTIONACTIONCARD);

        Player currentPlayer=currentGame.getCurrentPlayer();
        Deck currentDeck = currentGame.getDeck();
        ActionCard currentCard= currentDeck.getCurrentCard();
        boolean wasRemoved = false;
        if(currentCard instanceof RemoveConnectionActionCard){
            RemoveConnectionActionCard playCard = (RemoveConnectionActionCard) currentCard;
             wasRemoved=  playCard.play(t1, t2);
        }
        if(wasRemoved){
            currentGame.setNextPlayer();
            currentGame.setNextCard();
            currentGame.setMode(Game.Mode.GAME);
        }
        else{
            throw new InvalidInputException("No connection between tiles");
        }
    }
    
    private void doPlayTeleportActionCard(Tile t) throws InvalidInputException {

        Game currentGame = TileOApplication.getTileO().getCurrentGame();
        currentGame.setMode(Game.Mode.GAME_TELEPORTACTIONCARD);
        Deck currentDeck = currentGame.getDeck();
        ActionCard currentCard= currentDeck.getCurrentCard();
        if (currentCard instanceof TeleportActionCard){
        	TeleportActionCard playCard = (TeleportActionCard) currentCard;
        	setCurrentTile(t);
        }

        currentGame.setNextCard();
        currentGame.setMode(Game.Mode.GAME);

    }
    
    private void doPlayLoseTurnActionCard() throws InvalidInputException {
    	Game currentGame = TileOApplication.getTileO().getCurrentGame();
    	Deck d = currentGame.getDeck();
    	ActionCard c = d.getCurrentCard();
    	if (!(c instanceof LoseTurnActionCard))
    		throw new InvalidInputException("Invalid card");
    	((LoseTurnActionCard) c).play();
    	
    	currentGame.setNextCard();
        currentGame.setNextPlayer();
        currentGame.setMode(Game.Mode.GAME);
    }
    
    private void doPlayRemoveRandomTileActionCard(Game game) {
    Deck deck = game.getDeck();
    ActionCard currentCard = deck.getCurrentCard();
    
    if (currentCard instanceof RemoveRandomTileActionCard) {
      ((RemoveRandomTileActionCard) currentCard).play();
    }
    
    game.setNextPlayer();
    game.setNextCard();
    game.setMode(Game.Mode.GAME);
  }
  
  private boolean doPlayTurnInactiveActionCard(Game currentGame){   
	List<Tile> allTiles = currentGame.getTiles();
	boolean success = false;
	for(int i = 0; i< allTiles.size(); i++){
	Tile aTile = allTiles.get(i);
	if (aTile instanceof ActionTile){
		ActionTile aActionTile = (ActionTile) aTile;
		success = aActionTile.deactivate();
		}
	}
	
	currentGame.setNextPlayer();
    currentGame.setNextCard();
    currentGame.setMode(Game.Mode.GAME);

		return success;
  }
  
  private void doPlayChooseAdditionalMoveActionCard(int n) {
  	Game game = TileOApplication.getTileO().getCurrentGame();
  	setPossibleTiles(game.getCurrentPlayer().getPossibleMoves(n));
  }
  
  private void doPlayRevealTileActionCard() {
  	Game game = TileOApplication.getTileO().getCurrentGame();
  	game.setNextPlayer();
  	game.setNextCard();
  	game.setMode(Game.Mode.GAME);
  }
  
  public String revealTile(Tile t) {
  	Game game = TileOApplication.getTileO().getCurrentGame();
  	ActionCard c = game.getDeck().getCurrentCard();
  	if (c instanceof RevealTileActionCard) {
  		return ((RevealTileActionCard)c).play(t);
  	}
  	return "";
  }
  
    private void doPlaySendBackToStartActionCard(Tile t) throws InvalidInputException{
        Game currentGame = TileOApplication.getTileO().getCurrentGame();
	  	Player currentPlayer = currentGame.getCurrentPlayer();
	  	ArrayList<Player> otherPlayers= new ArrayList<Player>();
	  	for(Player p:currentGame.getPlayers()){
	  		if(p!=currentPlayer) otherPlayers.add(p);
	  	}
	  	currentGame.setMode(Game.Mode.GAME_SENDBACKTOSTARTACTIONCARD);
	  	Deck gameDeck = currentGame.getDeck();
	  	ActionCard currentCard= gameDeck.getCurrentCard();
	  	boolean wasSentBack= false;
	  	if(currentCard instanceof SendBackToStartActionCard){
	  		SendBackToStartActionCard playCard = (SendBackToStartActionCard)currentCard;
	  		wasSentBack = playCard.play(t,otherPlayers);
	  	}
	  	if(wasSentBack){
	  		 currentGame.setNextPlayer();
	         currentGame.setNextCard();
	         currentGame.setMode(Game.Mode.GAME);
	  	}
	  	else{
	  		throw new InvalidInputException("Not a Player");
	  	}
    }
    
	private void doPlaySwapPositionActionCard(Tile t) throws InvalidInputException{
		Game currentGame = TileOApplication.getTileO().getCurrentGame();
     	Player currentPlayer = currentGame.getCurrentPlayer();
     	ArrayList<Player> otherPlayers= new ArrayList<Player>();
     	for(Player p:currentGame.getPlayers()){
       		if(p!=currentPlayer) otherPlayers.add(p);
     	}
     	currentGame.setMode(Game.Mode.GAME_SWAPPOSITIONACTIONCARD);
     	Deck gameDeck = currentGame.getDeck();
     	ActionCard currentCard= gameDeck.getCurrentCard();
    	boolean wasSwapped= false;
     	if(currentCard instanceof SwapPositionActionCard){
       		SwapPositionActionCard playCard = (SwapPositionActionCard) currentCard;
       		wasSwapped = playCard.play(t,otherPlayers, currentPlayer);
     	}
     	if(wasSwapped){
       		currentGame.setNextPlayer();
       		currentGame.setNextCard();
 			currentGame.setMode(Game.Mode.GAME);
 		}
 		else{
 			throw new InvalidInputException("Not a Player");
 		}
 	}
 	
 	public boolean winTileHint(Tile t) throws InvalidInputException {
 		Game game = t.getGame();
 		Deck deck = game.getDeck();
 		ActionCard card = deck.getCurrentCard();
 		
 		if (!(card instanceof WinTileHintActionCard))
 			throw new InvalidInputException("Card does not match");
		return ((WinTileHintActionCard)card).play(t); 		
 	}
 	
 	private void doPlayWinTileHintActionCard() {
 		Game game = TileOApplication.getTileO().getCurrentGame();
  		game.setNextPlayer();
  		game.setNextCard();
  		game.setMode(Game.Mode.GAME);
 	}
    
    public String saveGame(String filename) {
	   TileOApplication.save(filename, false);
       return TileOApplication.getTileO().getCurrentGame().getFilename();
    }

    public Game loadGame(String filename) throws InvalidInputException {
        TileO tileo = TileOApplication.getTileO();
        Game loadedGame = TileOApplication.load(filename);

        if (loadedGame == null)
            throw new InvalidInputException("The game you selected does not exists");
            
        // removes the game if it exists
        for (int i=0; i<tileo.getGames().size(); ++i){
        	if (loadedGame == tileo.getGame(i)){
        		tileo.removeGame(tileo.getGame(i));
        		break;
            }
        }
    
        tileo.addGame(loadedGame);
        tileo.setCurrentGame(loadedGame);
        
        loadedGame.changeDie();
        
        switch (loadedGame.getMode()) {
        	case DESIGN:
        		setControllerState(ControllerState.Design);
        		setControllerStateGame(ControllerStateGame.Null);
        		break;
        	case GAME_WON:
        		setControllerState(ControllerState.Game);
        		setControllerStateGame(ControllerStateGame.GameWon);
        		break;
        	case GAME:
        		setControllerState(ControllerState.Game);
        		setControllerStateGame(ControllerStateGame.StartOfTurn);
        		break;
        	case GAME_ROLLDIEACTIONCARD:
        	case GAME_CONNECTTILESACTIONCARD:
        	case GAME_REMOVECONNECTIONACTIONCARD:
        	case GAME_TELEPORTACTIONCARD:
        	case GAME_LOSETURNACTIONCARD:
        	case GAME_REMOVERANDOMTILEACTIONCARD:
        	case GAME_TURNINACTIVEACTIONCARD:
        	case GAME_REVEALTILEACTIONCARD:
        	case GAME_SENDBACKTOSTARTACTIONCARD:
        	case GAME_CHOOSEADDITIONALMOVEACTIONCARD:
        	case GAME_SWAPPOSITIONACTIONCARD:
        	case GAME_WINTILEHINTACTIONCARD:
        		setControllerState(ControllerState.Game);
        		setControllerStateGame(ControllerStateGame.LandedAction);
        		break;	
        }

        return loadedGame;
    }

}
